1.测试日常笔记 2017年10月23日13:37:56

饿汉式单例模式
public class MySingleton {  
      
    private static MySingleton instance = new MySingleton();  
      
    private MySingleton(){}  
      
    public static MySingleton getInstance() {  
        return instance;  
    }       
}  
懒汉式 单例模式
public class MySingleton {  
      
    private static MySingleton instance = null;  
      
    private MySingleton(){}  
      
    public static MySingleton getInstance() {  
        if(instance == null){//懒汉式  
            instance = new MySingleton();  
        }  
        return instance;  
    }  
}  
线程安全懒汉式 单例模式
public class MySingleton {  
      
    //使用volatile关键字保其可见性  
    volatile private static MySingleton instance = null;  
      
    private MySingleton(){}  
       
    public static MySingleton getInstance() {  
        try {    
            if(instance != null){//懒汉式   
                  
            }else{  
                //创建实例之前可能会有一些准备性的耗时工作   
                Thread.sleep(300);  
                synchronized (MySingleton.class) {  
                    if(instance == null){//二次检查  
                        instance = new MySingleton();  
                    }  
                }  
            }   
        } catch (InterruptedException e) {   
            e.printStackTrace();  
        }  
        return instance;  
    }  
}  

2.2017年11月8日19:08:37
 闭包是一种特殊的对象。它由两部分构成：函数，以及创建该函数的环境。

3.2017年11月10日14:35:39
            //3.增加短信发送记录(转异步调用)
            bll.AddMessageHistory(clientIp, mobile);
            //3.1 利用委托实现异步写库
            Action<string,string> action = (a, b)=> bll.AddMessageHistory(a, b);
            action.BeginInvoke(clientIp, mobile, null, null);
            //3.2 利用任务实现异步写库
            Task.Run(() => bll.AddMessageHistory(clientIp, mobile));

4.2017年11月21日12:52:12
多路复用 redis 就是采用单线程多路复用模式
关于I/O多路复用(又被称为“事件驱动”)，首先要理解的是，操作系统为你提供了一个功能，当你的某个socket可读或者可写的时候，它可以给你一个通知。这样当配合非阻塞的socket使用时，只有当系统通知我哪个描述符可读了，我才去执行read操作，可以保证每次read都能读到有效数据而不做纯返回-1和EAGAIN的无用功。写操作类似。操作系统的这个功能通过select/poll/epoll/kqueue之类的系统调用函数来使用，这些函数都可以同时监视多个描述符的读写就绪状况，这样，多个描述符的I/O操作都能在一个线程内并发交替地顺序完成，这就叫I/O多路复用，这里的“复用”指的是复用同一个线程

作者：知乎用户
链接：https://www.zhihu.com/question/28594409/answer/52763082
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

线程是有内存开销的，1个线程可能需要512K（或2M）存放栈，那么1000个线程就要512M（或2G）内存。
线程的切换，或者说上下文切换是有CPU开销的，当大量时间花在上下文切换的时候，分配给真正的操作的CPU就要少很多。

5.2017年11月22日20:13:48
TCP/IP是传输层协议，主要解决数据如何在网络中传输；而HTTP是应用层协议，主要解决如何包装数据。

Socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口（API），通过Socket，我们才能使用TCP/IP协议。

http连接：http连接就是所谓的短连接，即客户端向服务器端发送一次请求，服务器端响应后连接即会断掉；

2017年12月17日17:47:20
6.服务治理 第三代 http://udn.yyuap.com/article-14285-1.html
第三代以云化为核心的云端微服务治理架构：2013年至今，随着云计算和微服务架构的发展，以AWS为首的基于微服务架构   云服务化的云端服务治理体系诞生，它的核心理念是服务微自治，利用云调度的弹性和敏捷，逐渐消除人工治理。微服务架构可以实现服务一定程度的自治，例如服务独立打包、独立部署、独立升级和独立扩容。通过云计算的弹性伸缩、单点故障迁移、服务健康度管理和自动容量规划等措施，结合微服务治理，逐步实现微服务的自治。

服务治理是核心：服务性能KPI统计、告警、服务健康度管理、灵活的弹性伸缩策略、故障自动迁移、服务限流和服务降级等多种治理手段，保障服务高质量运行。

服务降级：屏蔽降级、容错降级两种策略

微服务路由策略：随机 比较均匀
                轮循 权重设置轮循比率
	        服务调用时延  计算平均时延 调整权重
		一致性Hash 同参数同一个服务 宕机时平摊
		粘滞连接 有状态服务
集群容错策略：  Failover策略 重新选路
	        Failback策略  失败错误码 决定后续的执行策略
		Failcache策略 有状态路由 即先缓存，再等待，最后重试
		Failfast策略 快速失败 为核心的服务让资源

5.2018年2月13日10:02:49
1）面向对象有一个基本原则：通过抽象来隐藏背后的复杂性。